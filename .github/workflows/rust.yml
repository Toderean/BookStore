name: Rust

on:
  workflow_dispatch:
  push:

jobs:
  compare_versions:
    runs-on: ubuntu-latest
    steps:
      - name: Compare Versions
        run: |
          changes_path="crates/book_store"
          manifest_name="Cargo.toml"
          package_updated=false
          new_version="0.0.0"
          old_version="0.0.0"

          compare_versions() {
              # Split version numbers into their components
              IFS='.' read -r -a new_version_array <<< "$new_version"
              IFS='.' read -r -a old_version_array <<< "$old_version"

              # Compare major, minor, and patch versions
              for i in {0..2}; do
                  if [ "${new_version_array[i]}" -lt "${old_version_array[i]}" ]; then
                      return 1  # Old version is greater
                  fi
              done
              return 2  # Versions are equal
          }

          #Read current version from manifest
          if [ ! -f "{{ variables.changes_path }}/{{ variables.manifest_name }}" ]; then
              echo "Error: File '{{ variables.changes_path }}/{{ variables.manifest_name }}' not found."
              exit 1
          fi
          
          version=$(grep '^version' "{{ variables.changes_path }}/{{ variables.manifest_name }}" | cut -d '"' -f 2)
          
          if [ -z "$version" ]; then
              echo "Error: Version not found in '{{ variables.changes_path }}/{{ variables.manifest_name }}'."
              exit 1
          fi
          echo "$version"
          
          cd "{{variables.changes path}}"
          older_commit=$(git log --reverse --pretty=format:"%H" --"{{variables.manifest_name}}" | tail -n 1)
          echo "$older_commit"

          commit_hash="{{older_commit.stdout}}"
          cd "{{variables.changes_path}}"
          older_version=$(git show $commit_hash:{{variables.manifest_name}} | grep '^version' | cut -d '"' -f 2)
          echo "$version"

          compare_versions "{{ variables.new_version }}" "{{ variables.old_version }}"
          result=$?

          # Check the result and print accordingly
          if [ $result -eq 0 ]; then
              echo "New version is greater"
              package_updated=true
          elif [ $result -eq 1 ]; then
              echo "Old version is greater $older_version"
              exit 1
          else
              echo "Versions are equal"
          fi
          


        shell: bash
        
        